package com.kh.object.ex2;
/*
 *  * package
 *    : 클래스간의 공간적 충돌이나 접근방법의 충돌을 막기위해 저장위치를 구분하여,
 *                         명확하게 접근할 수 있도록 패키지로 구분하는 것이다.
 *    
 *    보통 패키지명은 회사 도메인을 역으로 생성한다.
 *    ex) https://www.kh.com 이 회사 도메인일 때,
 *            com.kh.xxx(xxx => 프로젝트명 또는 팀명이 들어간다.) 
 */
// Run이라는 이름의 클래스는 객체를 생성하기 위한 목적이 아니라
//                     main메소드를 통해 프로그램을 실행하기 위한 용도로 사용된다.
public class Run {
		/*
		 *  * 객체지향언어 : "객체"를 "지향"하는 언어로 프로그램이 "객체 중심"으로 돌아간다.
		 *    - 객체 : 눈이 보이든 아니든 모든 것을 의미한다. 
		 *    		  현실세계에서 독립적을 존재하는 (목적, 가치가 있는) 모든 것을 의미한다.
		 *    		  현실에서는 객체들 간의 상호작용으로 돌아간다.
		 *    		  (객체간 서로 연결고리가 있고 그 연결고리를 통해 돌아간다.)
		 *    - 객체지향 프로그램 : 현실세계의 객체들간의 상호작용을
		 *                        프로그래밍을 통해 가상세계에서 효과적으로 구현된 것
		 *        => 구현하고자 하는 프로그램상의 필요한 객체들을 만들기 위해(생성하기 위해)
		 *         : 클래스라는 설계도가 필요함! (클래스는 객체들의 데이터를 담아낼 그릇같은 존재다.)
		 *         
		 *     * 클래스 설계를 위한 작업 => 추상화 과정
		 *     [1] 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해보기
		 *     		학원 수강생이라고 한다면...
		 *     [2] 객체들의 공통적인 속성(데이터), 기능(동작, 행위, ...)들을 추출하기
		 *             이름 주소 나이 전화번호       밥먹기, 잠자기, 공부하기
		 *     [3] 불필요한 속성, 기능을 제거하기
		 *     
		 *     [4] 최종적으로 추려진 속성들을 어떤 자료형으로, 어떤 이름으로 사용할 것인지 정의하기
		 *                 (프로그램화하기 위한 마지막 단계)
		 *     
		 *     ex) 학생 관리 프로그램
		 *     1) 학생 객체 (윤석준 학생, 김일현 학생, 이윤서 학생, ...)
		 *      대상이 되는 정보를 주욱 나열해본다. 
		 *     2) 공통적으로 갖는 속성 및 기능을 적어본다.
		 *      -> 이름, 나이, 키, 몸무게, 주소, 연락처, 학원에 간다, 밥을 먹는다, 잠을 잔다, 공부를 한다, ...)
		 *      
		 *     3)실질적인 목적에 맞춰서 필요한 것만 남긴다.
		 *       예를 들어 학생 인적사항 관리 프로그램을 만든다면, 이름, 주소, 나이, 연락처, ...
		 *               학생 성적 관리 프로그램을 만든다면, 이름, 나이, 연락처, 과목별 점수, ...
		 *               학생 건강 관리 프로그램을 만든다면, 이름, 나이, 연락처, 키 몸무게, 먹는다, 휴식한다, 등의 정보가 필요하다.)
		 *               
		 *     4)이름, 나이, 키에 대해서 정의
		 *        - 이름 => String name;
		 *        - 나이 => int age;
		 *        = 키 => double height;
		 *        
		 *   *추상화 작업 후 프로그램에 적용
		 *   [1] "변수"만으로 프로그래밍을 한다면
		 *        - 변수 : 하나의 자료형으로 하나의 값만 보관가능하다.
		 *        윤석준 학생 객체를 하나 만들기 -> String name1 = "윤석준"; int age1 = 20; double height1 = 175.7;
		 *        김일현 학생 객체를 하나 만들기 -> String name2 = "김일현"; int age2 = 19; double height2 = 174.8;
		 *        
		 *    
		 *        두 명의 학생에 대한 정보를 관리하는데만도 6개의 정보가 들어간다. 배열을 사용한다 !
		 *        
		 *   [2] "배열"을 사용하여 프로그래밍 한다면
		 *        - 배열 : 하나의 자료형으로 여러개의 값을 보관함!
		 *        이름을 보관하는 배열 -> String[] name = {"윤석준", "김일현"};
		 *        나이를 보관하는 배열 -> int[] age = {"20", "19"} 
		 *                                       
		 *         배열을 사용하면, 인덱스 잘못 건드리면 데이터가 꼬일 수 있다. 
		 *         변수, 배열보다 좀 더 다양한 자료형을 넣을 수 있는 구조체 라는게 있다.
		 *         
		 *   [3] "구조체" : 여러개의 자료형으로 여러개의 값들을 보관함!
		 *       Struct human {
		 *       		String name;
		 *       		int age;
		 *       		double height;
		 *       }
		 *      문자열 값도 보관하고, 정수형 값도 보관하고, 동시에 실수형 값도 함께 보관
		 *      자료형 직접 만든 것임! ---> "나만의 자료형을 만들었다"
		 *      
		 *      구조체는 다른 언어에서 사용하는 방식이다(씨언어 등)
		 *      자바에서는 구조체 개념을 조금 더 확장하여 "클래스"라는 개념을 만들었다.
		 *      
		 *      변수-...배열-...구조체-... 클래스!
		 *      
		 *      class Student {
		 *         String name;
		 *         int age;
		 *         double height;
		 *         
		 *         // 기능(메소드가 추가될 수 있다.)
		 *         
		 *         클래스를 만들어보자.!
		 *        }
		 *      	
		 *     
		 *      
		 *      
		 */
	
	
	public static void main(String[] args) {
            //정의한 Student 클래스 사용,,,, 사용하려면 객체를 생성해야 함!
		
		   // * 변수 선언 : 클래스명 변수명;
		   Student std1;         // 선언만 하면 변수는 null값만 갖고 있을 것이다.
		   // *인스턴스 생성 및 할당: 변수명 = new 클래스명();
		   //                                클래스명() = 생성자이다.
		   //                                기본생성자(디폴트생성자)이다.
		   std1 = new Student();
		   // 이렇게 선언하는 순간 stack에는 std1의 주소값을 갖게 되고 Heap에는 std1과 같은 주소에 name age height이라는 게 자리를 차지한다.
		   // *인스턴스 변수에 접근 : 변수명.인스턴스변수명
		   //                          (인스턴스에 할당된 변수이기 때문에 인스턴스변수라고 표현하기도 한다.)
		   std1.name = "노승재";
		   std1.age = 36;
		   
		   // * 인스턴스 메소드에 접근하려면 (정의해놓은 프린트 메소드) : 참조변수명.메소드명();
		   std1.print();
		   
		   // * 선언 및 할당을 동시에 하는 방법 : 클래스명 참조변수명 = new 생성자;
		   Student std2 = new Student();
		   std2.name = "최진용";
		   std2.age = 20;
		   std2.print();
		   
		   
	}

}
